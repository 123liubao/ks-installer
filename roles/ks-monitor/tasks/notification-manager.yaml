---

- name: notification-manager | Getting notification-manager installation files
  copy:
    src: "notification-manager"
    dest: "{{ kubesphere_dir }}/"

- name: notification-manager | Getting federated files
  copy:
    src: "federated"
    dest: "{{ kubesphere_dir }}/"

- name: notification-manager | Getting notification-manager installation files
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kubesphere_dir }}/{{ item.path }}/{{ item.file }}"
  with_items:
    - { path: notification-manager, file: custom-values-notification.yaml }


- name: notification-manager | Checking notification-manager
  shell: >
    {{ bin_dir }}/helm list -f notification-manager -n kubesphere-monitoring-system
  register: notification_check
  failed_when: false


- name: notification-manager | Uninstalling old notification-manager
  shell: >
    {{ bin_dir }}/helm del notification-manager -n kubesphere-monitoring-system &&
    {{ bin_dir }}/kubectl delete -f /kubesphere/kubesphere/notification-manager/crds/
  register: nm_uninstall
  until: nm_uninstall.rc == 0
  retries: 5
  delay: 1
  when:
    - notification_check.stdout.find("0.1.0") != -1
  failed_when: false


- name: notification-manager | Deploying notification-manager
  shell: >
    {{ bin_dir }}/helm upgrade --install notification-manager
    {{ kubesphere_dir }}/notification-manager
    -f {{ kubesphere_dir }}/notification-manager/custom-values-notification.yaml
    -n kubesphere-monitoring-system
    --force
  register: deploy_result
  until: deploy_result is succeeded
  retries: 3
  delay: 10

- name: notification-manager | Checking federatednamespace crd installed
  shell: >
    {{ bin_dir }}/kubectl get crd federatednamespaces.types.kubefed.io -o jsonpath='{.metadata.name}'
  register: crd_installed
  failed_when: false

- name: notification-manager | Deploying federatednamespace crd
  shell: "{{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/federated/federatednamespaces.yaml"
  register: import
  failed_when: "import.stderr and 'Warning' not in import.stderr and 'spec.clusterIP' not in import.stderr"
  until: import is succeeded
  retries: 5
  delay: 3
  when:
    - multicluster is defined and multicluster.clusterRole == 'host'
    - crd_installed.rc != 0 or crd_installed.stdout.find("federatednamespaces.types.kubefed.io") == -1

- name: notification-manager | Checking federated namespace deployed
  shell: >
    {{ bin_dir }}/kubectl get federatednamespaces.types.kubefed.io -n kubesphere-monitoring-federated kubesphere-monitoring-federated -o jsonpath='{.metadata.name}'
  register: namespace_deployed
  failed_when: false

- name: notification-manager | Deploying federated namespace
  shell: "{{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/federated/kubesphere-monitoring-federated.yaml"
  register: import
  failed_when: "import.stderr and 'Warning' not in import.stderr and 'spec.clusterIP' not in import.stderr"
  until: import is succeeded
  retries: 5
  delay: 3
  when:
    - multicluster is defined and multicluster.clusterRole == 'host'
    - namespace_deployed.rc != 0 or namespace_deployed.stdout.find("kubesphere-monitoring-federated") == -1